plugins {
    id 'java-gradle-plugin'
    id 'groovy'
    id 'maven'
    id 'signing'
    id 'com.gradle.plugin-publish' version '0.9.10'
}

group = 'org.xbib.gradle.plugin'

apply plugin: 'maven'

configurations {
    wagon
}

dependencies {
    compileOnly gradleApi()
    implementation project(':groovy-git')
    testCompile gradleTestKit()
    testImplementation project(':groovy-git')
    testCompile "org.spockframework:spock-core:${project.property('spock.version')}"
    wagon "org.apache.maven.wagon:wagon-ssh:${project.property('wagon.version')}"
}

pluginBundle {
    website = 'https://github.com/jprante/groovy-git'
    vcsUrl = 'https://github.com/jprante/groovy-git.git'
    description = 'Git for Groovy'
    plugins {
        publishPlugin {
            id = 'org.xbib.gradle.plugin.git'
            displayName = 'Git for Groovy'
            tags = ['git', 'groovy']
        }
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier 'sources'
}

groovydoc {
    docTitle = description
}

task groovydocJar(type: Jar, dependsOn: 'groovydoc') {
    from groovydoc.destinationDir
    classifier = 'javadoc'
}

artifacts {
    archives sourceJar, groovydocJar
}

if (project.hasProperty('signing.keyId')) {
    signing {
        sign configurations.archives
    }
}

ext {
    user = 'jprante'
    projectName = 'groovy-git'
    projectDescription = 'Git for Groovy'
    scmUrl = 'https://github.com/' + user + '/' + name
    scmConnection = 'scm:git:git://github.com/' + user + '/' + name + '.git'
    scmDeveloperConnection = 'scm:git:git://github.com/' + user + '/' + name + '.git'
}

task xbibUpload(type: Upload, dependsOn: build) {
    group = 'publish'
    configuration = configurations.archives
    uploadDescriptor = true
    repositories {
        if (project.hasProperty('xbibUsername')) {
            mavenDeployer {
                configuration = configurations.wagon
                repository(url: uri(project.property('xbibUrl'))) {
                    authentication(userName: xbibUsername, privateKey: xbibPrivateKey)
                }
            }
        }
    }
}